 # https://mahotas.readthedocs.io/en/latest/edf.html
from glob import glob
import cv2
import numpy as np
import matplotlib.pylab as plt
import mahotas as mh
from tkinter import *
from PIL import ImageTk, Image

print(mh.__version__)

def create_image_stack(vid_file, n = 200):
    
    vidcap = cv2.VideoCapture(vid_file)
    success,image = vidcap.read()
    i = 0
    success = True
    h, w = image.shape[:2]
    imstack = np.zeros((n, h, w))
    while success and i < n:
      imstack[i,...] = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
      success,image = vidcap.read()
      i += 1
    return imstack

image = create_image_stack('D:\python pengcit\Python-Image-Processing-Cookbook-master\Chapter 01\images\highway.mp4') #cloud.mp4
stack,h,w = image.shape
plt.figure(figsize=(20,10))
plt.gray()
plt.imshow(image[0,...].astype(np.uint8)), plt.axis('off')
plt.title('An input image', size=20)
plt.axis('off')
plt.show()

focus = np.array([mh.sobel(t, just_filter=True) for t in image])
best = np.argmax(focus, 0)
image = image.reshape((stack,-1)) # image is now (stack, nr_pixels)
image = image.transpose() # image is now (nr_pixels, stack)
final = image[np.arange(len(image)), best.ravel()] # Select the right pixel at each location
final = final.reshape((h,w)) # reshape to get final result
plt.figure(figsize=(20,10))
plt.imshow(final.astype(np.uint8))
plt.axis('off'), plt.title('Output image', size=20)
plt.show()
cv2.imwrite('D:\python pengcit\Python-Image-Processing-Cookbook-master\Chapter 01\images\edf.png', final)

#GUI
root = Tk()
root.title("Image Viewer")

img = Image.open("D:\python pengcit\Python-Image-Processing-Cookbook-master\Chapter 01\images\edf.png") 
newsize = (1016, 595)
resize_image = img.resize(newsize)

image_no_1 = ImageTk.PhotoImage(Image.open("D:\python pengcit\Python-Image-Processing-Cookbook-master\Chapter 01\images\dof_in.png"))
image_no_2 = ImageTk.PhotoImage(Image.open("D:\python pengcit\Python-Image-Processing-Cookbook-master\Chapter 01\images\dof_out.png"))
image_no_3 = ImageTk.PhotoImage(resize_image) 

List_images = [image_no_1, image_no_2, image_no_3]
label = Label(image=image_no_1)
label.grid(row=0, column=0, columnspan=3)

def forward(img_no):
    global label
    global button_forward
    global button_back
    global button_exit
    label.grid_forget()
    label = Label(image=List_images[img_no-1])
    label.grid(row=0, column=0, columnspan=3)
    button_for = Button(root, text="forward",
                        command=lambda: forward(img_no+1))
 
    if img_no == 3:
        button_forward = Button(root, text="Forward",
                                state=DISABLED)
    button_back = Button(root, text="Back",
                         command=lambda: back(img_no-1))
    button_back.grid(row=1, column=0)
    button_exit.grid(row=1, column=1)
    button_for.grid(row=1, column=2)

def back(img_no):
    global label
    global button_forward
    global button_back
    global button_exit
    label.grid_forget()
    label = Label(image=List_images[img_no - 1])
    label.grid(row=0, column=0, columnspan=3)
    button_forward = Button(root, text="forward",
                            command=lambda: forward(img_no + 1))
    button_back = Button(root, text="Back",
                         command=lambda: back(img_no - 1))
    print(img_no)
 
    if img_no == 1:
      button_back = Button(root, Text="Back", state=DISABLED)
 
    label.grid(row=0, column=0, columnspan=3)
    button_back.grid(row=1, column=0)
    button_exit.grid(row=1, column=1)
    button_for.grid(row=1, column=2)
 
button_back = Button(root, text="Back", command=back,
                     state=DISABLED)
button_exit = Button(root, text="Exit",
                     command=root.destroy)
button_forward = Button(root, text="Forward",
                        command=lambda: forward(2))

button_back.grid(row=1, column=0)
button_exit.grid(row=1, column=1)
button_forward.grid(row=1, column=2)
 
root.mainloop()

